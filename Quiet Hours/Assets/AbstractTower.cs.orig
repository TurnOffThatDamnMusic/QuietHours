using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Threading;

//[RequireComponent(typeof(AudioSource))]
public class AbstractTower : MonoBehaviour {

    public double BaseCost;
    public double UpgradeCost;
    public int BaseDamage;
    public double BaseFirerate;
    public int BeatRate; //Sponsored by DJ Lucio
    public GameObject CurrentTarget;
    public bool isSelected = false;
    public List<AudioClip> TowerBeats; //Holds all audioclips for tower/projectile sounds
    public float audioLevel; //Sound level
    public int range;

    public enum towerType { SingleTarget, AOE, Cocount };

    public towerType myTowerType;


    public float timeStamp;
    public float fireCoolDown = 0.2F; //Time between shots for a tower
    private float nextFireTime = 0.0F;
    public MainLoop theLoop;

    private AudioSource audiosrc;
    private bool IsFiring;

<<<<<<< HEAD
    public GameObject coconut;
    public float coconutRange;

    private List<Coco> theCocos;
=======
    /**
      *  Projectile Variables
      *  
     **/  
    public Enemy currentTarget; //Assigns the current target of the bounce
    public GameObject projectile;
    public Transform mTarget;
    private Transform mTransform;

    public int bounceNumber; //Number of bounces before sound wave is absorbed/is dampened
    public double cooldown;

    public float BlastRadius;
    public float Velocity;
    public float rotSpeed = 90.0F;
>>>>>>> ac7b7faff538c0b43bccdd5238c01821d432a61a


    //Plays the set audio clip one time
    void playAudio()
    {
        //AudioClip currentBeat;
        if (TowerBeats.Count > 1)
        {
            int rIndex = Random.Range(0, TowerBeats.Count-1); //Randomly select an audioclip to play   
            audiosrc.PlayOneShot(TowerBeats[rIndex], audioLevel);
            //yield WaitForSeconds(BeatRate)
        } else
        {
            audiosrc.PlayOneShot(TowerBeats[0], audioLevel);
        }
    }
    //BongoCongo blat blat....MUMUMUMUMULTI-KILL_KILl_kill
    public void bounceAttack()
    {
        int currentBounces = 0;
        GameObject partypooper = theLoop.getBestTarget(gameObject, range);
        Enemy target = partypooper.GetComponent<Enemy>();
        if (currentBounces < bounceNumber && partypooper != null)
        {
            doDamage(target);
            playAudio();
            currentBounces++;

            //nextCustomer();
        }
    }
<<<<<<< HEAD
	// Use this for initialization
	void Start () {
        theCocos = new List<Coco>();

=======

    /**
    * Moves Projectile to the next enemy
    **/
    public void nextCustomer()
    {
        Vector3 nextTarget = mTarget.position - mTransform.position;
        Quaternion rot = Quaternion.LookRotation(nextTarget);
        mTransform.rotation = Quaternion.RotateTowards(mTransform.rotation, rot, rotSpeed * Time.deltaTime);
        mTransform.position += mTransform.forward * Velocity * Time.deltaTime;
    }
    // Use this for initialization
    void Start () {
>>>>>>> ac7b7faff538c0b43bccdd5238c01821d432a61a
        theLoop = GameObject.Find("MainGame").GetComponent<MainLoop>();
        if (theLoop != null) Debug.Log("MainGame object found");

        audiosrc = GetComponent<AudioSource>(); //assigns audio source to be played
        if(audiosrc != null) Debug.Log("Audiosource found");
    }



	// Update is called once per frame
	void Update () {
        //Cooldown code

        //Updating the cocos and keeping them moving
        foreach (Coco aCoco in theCocos)
        {
            if (aCoco.currentBounce > 3)
            {
                Destroy(aCoco.theCoco);
                theCocos.Remove(aCoco);
            }
            else
            {
                float step = 10.0f * Time.deltaTime;
                aCoco.theCoco.transform.position = Vector3.MoveTowards(aCoco.theCoco.transform.position, aCoco.currentTarget.transform.position, step);

                if (Vector3.Distance(aCoco.theCoco.transform.position, aCoco.currentTarget.transform.position) < .1)
                {
                    aCoco.currentBounce++;
                    GameObject jumpTarget = theLoop.getRandomInRange(aCoco.theCoco, coconutRange);

                    doDamage(jumpTarget.GetComponent<Enemy>());

                     if (jumpTarget != null)
                     {
                         Debug.Log("We are getting a legit jump target");
                         //tempCoco.transform.position = Vector3.MoveTowards(tempCoco.transform.position, jumpTarget.transform.position, step);

                         Vector3 dir2 = jumpTarget.transform.position - aCoco.theCoco.transform.position;
                         float angle2 = Mathf.Atan2(dir2.y, dir2.x) * Mathf.Rad2Deg;
                         aCoco.theCoco.transform.rotation = Quaternion.Euler(0f, 0f, angle2 - 90);

                         aCoco.currentTarget = jumpTarget;
                     }
                     else
                     {
                         Debug.Log("No target for the Coco :(");
                     }
                }
            }
        }

        if (Time.time > nextFireTime)
        {
            if (myTowerType == towerType.SingleTarget)
            {
                GameObject theEnemy = theLoop.getBestTarget(gameObject, range);
                Enemy tempEnemy = theEnemy.GetComponent<Enemy>();
                if (tempEnemy != null)
                {
                    doDamage(tempEnemy);

                    //Debug.Log("The enemy position is x : " + theEnemy.transform.position.x + " y :  " + theEnemy.transform.position.y + " z : " + theEnemy.transform.position.z);

                    //Look at the target
                    Vector3 dir = theEnemy.transform.position - transform.position; 
                    float angle = Mathf.Atan2(dir.y, dir.x) * Mathf.Rad2Deg; 
                    transform.GetChild(0).transform.rotation = Quaternion.Euler(0f, 0f, angle - 90);
                    

                    Debug.Log("The single target tower is firing");
                    nextFireTime = Time.time + fireCoolDown;
                }
                else
                {
                    Debug.Log("No target is found");
                }
            }

            else if (myTowerType == towerType.AOE)
            {
                theLoop.damageAllInArea(gameObject);
                Debug.Log("The AOE tower is firing");
                nextFireTime = Time.time + fireCoolDown;
            }

            else if (myTowerType == towerType.Cocount)
            {
                GameObject theEnemy = theLoop.getBestTarget(gameObject, range);
                Enemy tempEnemy = theEnemy.GetComponent<Enemy>();
                if (tempEnemy != null)
                {
                    doDamage(tempEnemy);

                    //Look at the target
                    Vector3 dir = theEnemy.transform.position - transform.position;
                    float angle = Mathf.Atan2(dir.y, dir.x) * Mathf.Rad2Deg;
                    transform.GetChild(0).transform.rotation = Quaternion.Euler(0f, 0f, angle - 90);

                    GameObject tempCoco = (GameObject)Instantiate(coconut, transform.position, Quaternion.identity);

                    Coco aCoco = new Coco(tempCoco, theEnemy);
                    theCocos.Add(aCoco);

                    nextFireTime = Time.time + fireCoolDown;

                }

                else
                {
                    Debug.Log("No target is found");
                }
            }
        }
    }

    public class Coco
    {
        public int currentBounce;
        public GameObject theCoco;
        public GameObject currentTarget;

        public Coco(GameObject aCoco, GameObject aTarget)
        {
            theCoco = aCoco;
            currentBounce = 0;
            currentTarget = aTarget;
        }
    }

    public void cocoBounce(GameObject tempCoco)
    {
        Debug.Log("We are coco bouncing");
        for (int i = 0; i < 3; i++)
        {
            GameObject jumpTarget = theLoop.getBestTarget(tempCoco, coconutRange);

            float step = 3f * Time.deltaTime;
            tempCoco.transform.position = Vector3.MoveTowards(tempCoco.transform.position, jumpTarget.transform.position, step);

            Vector3 dir2 = jumpTarget.transform.position - tempCoco.transform.position;
            float angle2 = Mathf.Atan2(dir2.y, dir2.x) * Mathf.Rad2Deg;
            tempCoco.transform.rotation = Quaternion.Euler(0f, 0f, angle2 - 90);

            while (Vector3.Distance(tempCoco.transform.position, jumpTarget.transform.position) > .05)
            {
                //Do nothing and wait for it to get to the place
            }

        }
    }

    public void doDamage(Enemy someEnemy)
    {
        //timeStamp = Time.time + fireCoolDown;
        someEnemy.takeDamage(BaseDamage);
        //Debug.Log("Ima firin ma lazer");
    }
}
